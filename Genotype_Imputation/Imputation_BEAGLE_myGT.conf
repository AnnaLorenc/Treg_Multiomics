
            # For sanity checking that your config file is not obsolete. Update the version key in your 
            #  config file to get rid of the warnings.
            #
            # What changed since version:
            #   1356084361 .. Using "bcftools concat" instead of "vcf-phased-join"
            #   1413467786 .. Using "bcftools annotate" and "bcftools +fixploidy"
            #
            version  => '1413467786',

            beagle_jar  => '/lustre/scratch117/cellgen/teamtrynka/lara/TregProject_Genotypes/BLUEPRINT_mimic_Imputation/beagle.21Jan17.6cc.jar',
            beagle_args => 'modelscale=2',
            beagle_tags => 'INFO,FORMAT',    # bcftools annotate -c args: all INFO,FORMAT tag
            java_exec   => '/software/jdk1.8.0_60/bin/java',
            java_args   => '',
            tabix       => '/software/vertres/bin-external/tabix',
            bcftools    => '/lustre/scratch117/cellgen/teamtrynka/lara/TregProject_Genotypes/BLUEPRINT_mimic_Imputation/vr-runner/bcftools-1.8/bcftools',
            bcftools_plugins   => '/lustre/scratch117/cellgen/teamtrynka/lara/TregProject_Genotypes/BLUEPRINT_mimic_Imputation/vr-runner/bcftools-1.8/libexec/bcftools',
            concat_args => '-ad both',

            # The known_vcf (aka -k) and in_vcf (aka -i) file names can contain the string "{CHROM}" which will be expanded 
            #   according to chromosomes listed in the "region" key below. If the key is not defined, glob expansion will
            #   be used to obtain the chromosomes. The VCFs must be tabix indexed. Note that Beagle requires phased
            #   known_vcf and the samples in known_vcf must not overlap the input samples.
            # When known_vcf is set, consider also setting the chunk_by_known key.
            #
            in_vcf     => '/lustre/scratch117/cellgen/teamtrynka/lara/TregProject_Genotypes/BLUEPRINT_mimic_Imputation/AllSamples_SoFar_FilteredSNPs_AutosomesChrX_forImputation_chr{CHROM}.vcf.gz',
            known_vcf  => '/lustre/scratch116/vr/ref/human/GRCh37/imputation/uk10k+1000g-phase3/vcf/{CHROM}.bcf',

            # If supplied, vcf check will be run to evaluate the performance
            # eval_vcf => undef,

            # Number of sites per chunk and in buffer regions. The total number of sites considered is buffer_nsites+chunk_nsites.
            #   The chunks are determined based on the input VCF (-i) unless chunk_by_known is set. 
            buffer_nsites  => 1_000,
            chunk_nsites   => 3_000,
            chunk_by_known => 0,
            max_chr_len    => 249250621,

            # Indels usually have high false positives rate
            exclude_multiallelic_indels => 0,

            # If unset, imputed sites from known_vcf which are not present in in_vcf will not be printed on output. 
            #   This is useful when performing genotype refinement and the number of sites should stay unchanged.
            do_impute  => 1,

            # Tag to use from the in_vcf file: gt (GT), gl (GL or PL), gtgl (GT, GL, or PL)
            input_tag => 'gt',

            # Create whole-genome VCF? This can produce *huge* files for thousands of samples
            merge_chroms   => 0,

            # Regions to impute, the chunks must be sorted by chromosomal position or else the resulting VCF will not
            #   be sorted. By default, the whole VCF is imputed.
            # region => [ '1:159000000-161000000', '1:62000000-64000000', '2' ],

            limits   => { memory=>10_000, runtime=>24*60 },
            # How much memory should be given to Beagle in the next run if it fails because of out-of-memory error?
            #   Smaller step saves farm node's memory but can result in multiple runs (note that it can take
            #   considerable amount of CPU time before the memory is exhausted). On the other hand, bigger step may 
            #   block free CPUs on multi-core nodes by reserving too much memory.
            memstep  => '2000',   # the step for increasing memory limit

            save_beagle_outputs => 0,   # If set, raw output files from beagle will not be removed (for debugging)

            do_clean => 1,         # Remove runner's temporary files
    
